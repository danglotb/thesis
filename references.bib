@article{flyvbjerg2006,
  title={Five misunderstandings about case-study research},
  author={Flyvbjerg, Bent},
  journal={Qualitative inquiry},
  volume={12},
  number={2},
  pages={219--245},
  year={2006},
  publisher={Sage publications}
}


@article{howden1978theoretical,
  title={Theoretical and empirical studies of program testing},
  author={Howden, William E},
  journal={IEEE Transactions on Software Engineering},
  number={4},
  pages={293--298},
  year={1978},
  publisher={IEEE}
}


@misc{BaudryARM15,
 title = {{DSpot: Test Amplification for Automatic Assessment of Computational Diversity}},
 howpublished={ArXiv paper 1503.05807},
 author = {Baudry, Benoit and Allier, Simon and Rodriguez-Cancio, Marcelino and Monperrus, Martin},
 url = {https://arxiv.org/pdf/1503.05807.pdf},
 year = {2015},
}

@inproceedings{fraser2012seed,
  title={The seed is strong: Seeding strategies in search-based software testing},
  author={Fraser, Gordon and Arcuri, Andrea},
  booktitle={Software Testing, Verification and Validation (ICST), 2012 IEEE Fifth International Conference on},
  pages={121--130},
  year={2012},
  organization={IEEE}
}


@inproceedings{wu2015deep,
  title={Deep parameter optimisation},
  author={Wu, Fan and Weimer, Westley and Harman, Mark and Jia, Yue and Krinke, Jens},
  booktitle={Proceedings of the 2015 Annual Conference on Genetic and Evolutionary Computation},
  pages={1375--1382},
  year={2015},
  organization={ACM}
}

@article{fraser2013whole,
  title={Whole test suite generation},
  author={Fraser, Gordon and Arcuri, Andrea},
  journal={IEEE Transactions on Software Engineering},
  volume={39},
  number={2},
  pages={276--291},
  year={2013},
  publisher={IEEE}
}


@inproceedings{godefroid2005dart,
  title={DART: directed automated random testing},
  author={Godefroid, Patrice and Klarlund, Nils and Sen, Koushik},
  booktitle={ACM Sigplan Notices},
  volume={40},
  number={6},
  pages={213--223},
  year={2005},
  organization={ACM}
}

@inproceedings{groce2007randomized,
  title={Randomized differential testing as a prelude to formal verification},
  author={Groce, Alex and Holzmann, Gerard and Joshi, Rajeev},
  booktitle={Proceedings of the 29th international conference on Software Engineering},
  pages={621--631},
  year={2007},
  organization={IEEE Computer Society}
}

@article{fraser2015does,
  title={Does automated unit test generation really help software testers? a controlled empirical study},
  author={Fraser, Gordon and Staats, Matt and McMinn, Phil and Arcuri, Andrea and Padberg, Frank},
  journal={ACM Transactions on Software Engineering and Methodology (TOSEM)},
  volume={24},
  number={4},
  pages={23},
  year={2015},
  publisher={ACM}
}


@article{demillo1978hints,
  title={Hints on test data selection: Help for the practicing programmer},
  author={DeMillo, Richard A and Lipton, Richard J and Sayward, Frederick G},
  journal={Computer},
  volume={11},
  number={4},
  pages={34--41},
  year={1978},
  publisher={IEEE}
}

@article{Roche2013Devops,
 author = {Roche, James},
 title = {Adopting DevOps Practices in Quality Assurance},
 journal = {Commun. ACM},
 volume = {56},
 year = {2013},
 } 

@Book{beck2003test,
  Title                    = {{Test-driven development: by example}},
  Author                   = {Beck, K.},
  Publisher                = {Addison-Wesley Professional},
  Year                     = {2003}
}

@article{DijkstraLecture1989,
	author = {Edsger Dijkstra},
	year = {1989},
	month = {01},
	pages = {},
	title = {On the cruelty of really teaching computing science},
	volume = {32},
	journal = {Communications of The ACM - CACM}
}

@inproceedings{jia2015genetic,
  title={Genetic improvement using higher order mutation},
  author={Jia, Yue and Wu, Fan and Harman, Mark and Krinke, Jens},
  booktitle={Proceedings of the Companion Publication of the 2015 Annual Conference on Genetic and Evolutionary Computation},
  pages={803--804},
  year={2015},
  organization={ACM}
}

@inproceedings{qi2013efficient,
  title={Efficient automated program repair through fault-recorded testing prioritization},
  author={Qi, Yuhua and Mao, Xiaoguang and Lei, Yan},
  booktitle={Software Maintenance (ICSM), 2013 29th IEEE International Conference on},
  pages={180--189},
  year={2013},
  organization={IEEE}
}

@inproceedings{fast2010designing,
  title={Designing better fitness functions for automated program repair},
  author={Fast, Ethan and Le Goues, Claire and Forrest, Stephanie and Weimer, Westley},
  booktitle={Proceedings of the 12th annual conference on Genetic and evolutionary computation},
  pages={965--972},
  year={2010},
  organization={ACM}
}

@inproceedings{wilkerson2010coevolutionary,
  title={Coevolutionary automated software correction},
  author={Wilkerson, Josh L and Tauritz, Daniel},
  booktitle={Proceedings of the 12th annual conference on Genetic and evolutionary computation},
  pages={1391--1392},
  year={2010},
  organization={ACM}
}

@inproceedings{arcuri2008novel,
  title={A novel co-evolutionary approach to automatic software bug fixing},
  author={Arcuri, Andrea and Yao, Xin},
  booktitle={Evolutionary Computation, 2008. CEC 2008.(IEEE World Congress on Computational Intelligence). IEEE Congress on},
  pages={162--168},
  year={2008},
  organization={IEEE}
}

@inproceedings{kalboussi2013preference,
  title={Preference-based many-objective evolutionary testing generates harder test cases for autonomous agents},
  author={Kalboussi, Sabrine and Bechikh, Slim and Kessentini, Marouane and Said, Lamjed Ben},
  booktitle={International Symposium on Search Based Software Engineering},
  pages={245--250},
  year={2013},
  organization={Springer}
}


@article{petke2017genetic,
  title={Genetic improvement of software: a comprehensive survey},
  author={Petke, Justyna and Haraldsson, Saemundur and Harman, Mark and White, David and Woodward, John and others},
  journal={IEEE Transactions on Evolutionary Computation},
  year={2017},
  publisher={IEEE}
}

@inproceedings{lakhotia2007multi,
  title={A multi-objective approach to search-based test data generation},
  author={Lakhotia, Kiran and Harman, Mark and McMinn, Phil},
  booktitle={Proceedings of the 9th annual conference on Genetic and evolutionary computation},
  pages={1098--1105},
  year={2007},
  organization={ACM}
}



@inproceedings{andrews2005mutation,
  title={Is mutation an appropriate tool for testing experiments?},
  author={Andrews, James H and Briand, Lionel C and Labiche, Yvan},
  booktitle={Proceedings of the 27th international conference on Software engineering},
  pages={402--411},
  year={2005},
  organization={ACM}
}

@inproceedings{Just:2014:MVS:2635868.2635929,
 author = {Just, Ren{\'e} and Jalali, Darioush and Inozemtseva, Laura and Ernst, Michael D. and Holmes, Reid and Fraser, Gordon},
 title = {Are Mutants a Valid Substitute for Real Faults in Software Testing?},
 booktitle = {Proceedings of the 22Nd ACM SIGSOFT International Symposium on Foundations of Software Engineering},
 series = {FSE 2014},
 year = {2014},
 isbn = {978-1-4503-3056-5},
 location = {Hong Kong, China},
 pages = {654--665},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/2635868.2635929},
 doi = {10.1145/2635868.2635929},
 acmid = {2635929},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Test effectiveness, code coverage, mutation analysis, real faults},
} 

@INPROCEEDINGS{7372009,
author={S. Shamshiri and R. Just and J. M. Rojas and G. Fraser and P. McMinn and A. Arcuri},
booktitle={2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE)},
title={Do Automatically Generated Unit Tests Find Real Faults? An Empirical Study of Effectiveness and Challenges (T)},
year={2015},
pages={201-211},
keywords={Java;automatic test software;fault diagnosis;program testing;Agitar;Defects4J dataset;;Java;Randoop;automated unit test generators;code coverage;execution environment simulation;fault detection;faulty program state propagation;faulty statements;observable output;sensitive assertions;test suites;unit test generation tools;Generators;Java;Manuals;Software;Testing;Writing;automated test generation;empirical study;regression testing;test effectiveness;unit testing},
doi={10.1109/ASE.2015.86},
month={Nov},}

@article{Xuan:2016:BRE:2949070.2949128,
 author = {Xuan, Jifeng and Cornu, Benoit and Martinez, Matias and Baudry, Benoit and Seinturier, Lionel and Monperrus, Martin},
 title = {B-Refactoring},
 journal = {Inf. Softw. Technol.},
 issue_date = {August 2016},
 volume = {76},
 number = {C},
 month = aug,
 year = {2016},
 issn = {0950-5849},
 pages = {65--80},
 numpages = {16},
 url = {http://dx.doi.org/10.1016/j.infsof.2016.04.016},
 doi = {10.1016/j.infsof.2016.04.016},
 acmid = {2949128},
 publisher = {Butterworth-Heinemann},
 address = {Newton, MA, USA},
}

@inproceedings{Xuan:2014:TCP:2635868.2635906,
 author = {Xuan, Jifeng and Monperrus, Martin},
 title = {Test Case Purification for Improving Fault Localization},
 booktitle = {Proceedings of the 22Nd ACM SIGSOFT International Symposium on Foundations of Software Engineering},
 series = {FSE 2014},
 year = {2014},
 isbn = {978-1-4503-3056-5},
 location = {Hong Kong, China},
 pages = {52--63},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/2635868.2635906},
 doi = {10.1145/2635868.2635906},
 acmid = {2635906},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Test case purification, dynamic program slicing, spectrum-based fault localization, test case atomization},
}

@article{Yoo:2012:TDR:2237756.2237758,
 author = {Yoo, S. and Harman, M.},
 title = {Test Data Regeneration: Generating New Test Data from Existing Test Data},
 journal = {Softw. Test. Verif. Reliab.},
 issue_date = {May 2012},
 volume = {22},
 number = {3},
 month = may,
 year = {2012},
 issn = {0960-0833},
 pages = {171--201},
 numpages = {31},
 url = {http://dx.doi.org/10.1002/stvr.435},
 doi = {10.1002/stvr.435},
 acmid = {2237758},
 publisher = {John Wiley and Sons Ltd.},
 address = {Chichester, UK},
 keywords = {search-based software testing, test data generation},
} 

@article{Yoo:2012:RTM:2284811.2284813,
 author = {Yoo, S. and Harman, M.},
 title = {Regression Testing Minimization, Selection and Prioritization: A Survey},
 journal = {Softw. Test. Verif. Reliab.},
 issue_date = {March 2012},
 volume = {22},
 number = {2},
 month = mar,
 year = {2012},
 issn = {0960-0833},
 pages = {67--120},
 numpages = {54},
 url = {http://dx.doi.org/10.1002/stv.430},
 doi = {10.1002/stv.430},
 acmid = {2284813},
 publisher = {John Wiley and Sons Ltd.},
 address = {Chichester, UK},
 keywords = {regression test selection, regression testing, test case prioritization, test suite minimization},
} 

@inproceedings{Gousi13,
  author = {Gousios, Georgios},
  title = {The GHTorrent dataset and tool suite},
  booktitle = {Proceedings of the 10th Working Conference on Mining Software
    Repositories},
  series = {MSR '13},
  year = {2013},
  isbn = {978-1-4673-2936-1},
  location = {San Francisco, CA, USA},
  pages = {233--236},
  numpages = {4},
  url = {http://dl.acm.org/citation.cfm?id=2487085.2487132},
  acmid = {2487132},
  publisher = {IEEE Press},
  address = {Piscataway, NJ, USA},
}

@article{pawlak:hal-01169705,
  TITLE = {Spoon: A Library for Implementing Analyses and Transformations of Java Source Code},
  AUTHOR = {Pawlak, Renaud and Monperrus, Martin and Petitprez, Nicolas and Noguera, Carlos and Seinturier, Lionel},
  JOURNAL = {Software: Practice and Experience},
  PUBLISHER = {Wiley-Blackwell},
  PAGES = {1155-1179},
  VOLUME = {46},
  URL = {https://hal.archives-ouvertes.fr/hal-01078532/document},
  YEAR = {2015},
  doi = {10.1002/spe.2346},
  url = {https://hal.archives-ouvertes.fr/hal-01078532/document}
}

@inproceedings{msr17challenge,
 title={TravisTorrent: Synthesizing Travis CI and GitHub for Full-Stack Research on Continuous Integration},
 author={Beller, Moritz and Gousios, Georgios and Zaidman, Andy},
 booktitle={Proceedings of the 14th working conference on mining software repositories},
 preprint={http://www.st.ewi.tudelft.nl/~mbeller/publications/2017_beller_gousios_zaidman_travistorrent_synthesizing_travis_ci_and_github_for_full-stack_research_on_continuous_integration.pdf},
 year={2017}
}

@inproceedings{Pezze:2013:GEI:2510665.2511580,
 author = {Pezzè, Mauro and Rubinov, Konstantin and Wuttke, Jochen},
 title = {Generating Effective Integration Test Cases from Unit Ones},
 booktitle = {Proceedings of the 2013 IEEE Sixth International Conference on Software Testing, Verification and Validation},
 series = {ICST '13},
 year = {2013},
 isbn = {978-0-7695-4968-2},
 pages = {11--20},
 numpages = {10},
 url = {http://dx.doi.org/10.1109/ICST.2013.37},
 doi = {10.1109/ICST.2013.37},
 acmid = {2511580},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
 keywords = {integration testing, automatic test generation},
}

@inproceedings{Niedermayr:2016:MTT:2896941.2896944,
 author = {Niedermayr, Rainer and Juergens, Elmar and Wagner, Stefan},
 title = {Will My Tests Tell Me if I Break This Code?},
 booktitle = {Proceedings of the International Workshop on Continuous Software Evolution and Delivery},
 series = {CSED '16},
 year = {2016},
 isbn = {978-1-4503-4157-8},
 location = {Austin, Texas},
 pages = {23--29},
 numpages = {7},
 url = {http://doi.acm.org/10.1145/2896941.2896944},
 doi = {10.1145/2896941.2896944},
 acmid = {2896944},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {code coverage, mutation testing, regression testing, test suite effectiveness},
} 

@inproceedings{Zhang:2016:IRT:2950290.2950313,
 author = {Zhang, Jie and Lou, Yiling and Zhang, Lingming and Hao, Dan and Zhang, Lu and Mei, Hong},
 title = {Isomorphic Regression Testing: Executing Uncovered Branches Without Test Augmentation},
 booktitle = {Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering},
 series = {FSE 2016},
 year = {2016},
 isbn = {978-1-4503-4218-6},
 location = {Seattle, WA, USA},
 pages = {883--894},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/2950290.2950313},
 doi = {10.1145/2950290.2950313},
 acmid = {2950313},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {branch negation, regression testing, software testing},
} 

@inproceedings{ESECFSE11,
	author = {Fraser, Gordon and Arcuri, Andrea},
	title = {EvoSuite: automatic test suite generation for object-oriented software},
	booktitle = {Proceedings of the 19th ACM SIGSOFT Symposium and the 13th European Conference on Foundations of Software Engineering},
	series = {ESEC/FSE '11},
	year = {2011},
	isbn = {978-1-4503-0443-6},
	location = {Szeged, Hungary},
	pages = {416--419},
	numpages = {4},
	url = {http://doi.acm.org/10.1145/2025113.2025179},
	doi = {10.1145/2025113.2025179},
	acmid = {2025179},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {assertion generation, search based soft- ware testing, test case generation},
}

@article{evosuite:emse14_mutation,
   year={2014},
   journal={Empirical Software Engineering},
   title={Achieving Scalable Mutation-based Generation of Whole Test Suites},
   publisher={Springer US},
   author={Fraser, Gordon and Arcuri, Andrea},
   language={English},
   volume={20},
   number={3},
   pages={783--812},
}

@article{danglot2017emerging,
  title={The Emerging Field of Test Amplification: A Survey},
  author={Danglot, Benjamin and Vera-Perez, Oscar and Yu, Zhongxing and Monperrus, Martin and Baudry, Benoit},
  journal={arXiv preprint arXiv:1705.10692},
  year={2017}
}


@article{mcminn2004survey,
  title={Search-based software test data generation: a survey},
  author={McMinn, Phil},
  journal={Software testing, Verification and reliability},
  volume={14},
  number={2},
  pages={105--156},
  year={2004},
  publisher={Wiley Online Library}
}


@article{survey_oracle_tse,
 author = {Barr, E.T. and Harman, M. and McMinn, P. and Shahbaz, M. and Yoo, S.},
 journal = {IEEE Transactions on Software Engineering},
 title = {{The Oracle Problem in Software Testing: a Survey}},
 year = {2015},
 volume = {41},
 number = {5},
 pages = {507-525},
}


@article{Baudry05a,
	Author = {Baudry, Benoit and Fleurey, Franck and J\'ez\'equel, Jean-Marc and {Le~Traon} Yves},
	Journal = {Software, Testing, Verification \& Reliability journal {(STVR)}},
	Month = jun,
	Number = {2},
	Pages = {73-96},
	Title = {From Genetic to Bacteriological Algorithms for Mutation-Based Testing},
	url = {http://www.irisa.fr/triskell/publis/2005/Baudry05a.pdf},
	Volume = {15},
	Year = {2005},
}

@article{Baudry05d,
	keywords = {test, OOP, search-based},
	Author = {Baudry, Benoit and Fleurey, Franck and J\'ez\'equel, Jean-Marc and {Le~Traon}, Yves},
	Journal = {IEEE Software},
	Month = mar,
	Number = {2},
	Pages = {76--82},
	Title = {Automatic Test Cases Optimization: a Bacteriologic Algorithm},
	url = {http://www.irisa.fr/triskell/publis/2005/Baudry05d.pdf},
	Volume = {22},
	x-abbrv = {Software},
	X-Editorial-Board = {yes},
	X-International-Audience = {yes},
	X-Language = {EN},
	Year = {2005},
	Bdsk-Url-1 = {http://www.irisa.fr/triskell/publis/2005/Baudry05d.pdf}
}

@article{smith2009guiding,
  title={On guiding the augmentation of an automated test suite via mutation analysis},
  author={Smith, Ben H and Williams, Laurie},
  journal={Empirical Software Engineering},
  volume={14},
  number={3},
  pages={341--369},
  year={2009},
  publisher={Springer},
  url={https://repository.lib.ncsu.edu/bitstream/handle/1840.4/1967/TR-2008-9.pdf?sequence=1}
}

@INPROCEEDINGS{multiple-mutants,
author={M. h. Liu and Y. f. Gao and J. h. Shan and J. h. Liu and L. Zhang and J. s. Sun},
booktitle={2006 22nd IEEE International Conference on Software Maintenance},
title={An Approach to Test Data Generation for Killing Multiple Mutants},
year={2006},
pages={113-122},
keywords={program testing;software quality;adequacy criterion;mutation testing;software quality assurance;software testing;test data generation;unit testing;Automatic testing;Computer science;Costs;Data engineering;Electronic equipment testing;Genetic mutations;Power engineering and energy;Software quality;Software testing;Sun;adequacy criterion;generation;mutation testing;test data;unit testing},
doi={10.1109/ICSM.2006.13},
ISSN={1063-6773},
month={Sept},
}

@inproceedings{Xie2006,
 author = {Xie, Tao},
 title = {{Augmenting Automatically Generated Unit-test Suites with Regression Oracle Checking}},
 booktitle = {Proceedings of the 20th European Conference on Object-Oriented Programming},
 year = {2006},
 pages = {380--403},
 } 

@inproceedings{Andrews:2005:MAT:1062455.1062530,
 author = {Andrews, J. H. and Briand, L. C. and Labiche, Y.},
 title = {Is Mutation an Appropriate Tool for Testing Experiments?},
 booktitle = {Proceedings of the 27th International Conference on Software Engineering},
 series = {ICSE '05},
 year = {2005},
 isbn = {1-58113-963-2},
 location = {St. Louis, MO, USA},
 pages = {402--411},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/1062455.1062530},
 doi = {10.1145/1062455.1062530},
 acmid = {1062530},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {hand-seeded faults, mutants, real faults},
} 


@inproceedings{Harder03,
 author = {Harder, Michael and Mellen, Jeff and Ernst, Michael D.},
 title = {Improving Test Suites via Operational Abstraction},
 booktitle = {Proc. of the Int. Conf. on Software Engineering (ICSE)},
 year = {2003},
 pages = {60--71},
} 

@inproceedings{milani2014,
  title={Leveraging existing tests in automated test generation for web applications},
  author={Milani Fard, Amin and Mirzaaghaei, Mehdi and Mesbah, Ali},
  booktitle={Proceedings of the 29th ACM/IEEE international conference on Automated software engineering},
  pages={67--78},
  year={2014},
  organization={ACM}
}

@inproceedings{robetaler2012isolating,
  title={Isolating failure causes through test case generation},
  author={R{\"o}$\beta$ler, Jeremias and Fraser, Gordon and Zeller, Andreas and Orso, Alessandro},
  booktitle={Proceedings of the 2012 International Symposium on Software Testing and Analysis},
  pages={309--319},
  year={2012},
  organization={ACM}
}

@article{Yu2013,
 author = {Yu, Zhongxing and Bai, Chenggang and Cai, Kai-Yuan},
 title = {{Mutation-oriented Test Data Augmentation for GUI Software Fault Localization}},
 journal = {Inf. Softw. Technol.},
 issue_date = {December, 2013},
 volume = {55},
 number = {12},
 month = dec,
 year = {2013},
 issn = {0950-5849},
 pages = {2076--2098},
 numpages = {23},
 }

@inproceedings{Xuan:2015:CRV:2786805.2803206,
 author = {Xuan, Jifeng and Xie, Xiaoyuan and Monperrus, Martin},
 title = {{Crash Reproduction via Test Case Mutation: Let Existing Test Cases Help}},
 booktitle = {Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering},
 series = {ESEC/FSE 2015},
 year = {2015},
 isbn = {978-1-4503-3675-8},
 location = {Bergamo, Italy},
 pages = {910--913},
 numpages = {4},
 url = {http://doi.acm.org/10.1145/2786805.2803206},
 doi = {10.1145/2786805.2803206},
 acmid = {2803206},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Crash reproduction, stack trace, test case mutation},
} 

@misc{history_agile,
  author = {Peter Varhol},
  title = {To agility and beyond: The history—and legacy—of agile development},
  url = {https://techbeacon.com/agility-beyond-history%E2%80%94-legacy%E2%80%94-agile-development},
}

@misc{V-model,
  author = {Wikipedia},
  title = {V-Model (software development)},
  url = {https://en.wikipedia.org/wiki/V-Model_(software_development)},
}

@inproceedings{tonella,
 author = {Tonella, Paolo},
 title = {Evolutionary Testing of Classes},
 booktitle = {Proceedings of the 2004 ACM SIGSOFT International Symposium on Software Testing and Analysis},
 series = {ISSTA '04},
 year = {2004},
 isbn = {1-58113-820-2},
 location = {Boston, Massachusetts, USA},
 pages = {119--128},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/1007512.1007528},
 doi = {10.1145/1007512.1007528},
 acmid = {1007528},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {automated test case generation, genetic algorithms, object-oriented testing},
} 

@InProceedings{TaoXie2006,
    author="Xie, Tao",
    editor="Thomas, Dave",
    title="Augmenting Automatically Generated Unit-Test Suites with Regression Oracle Checking",
    booktitle="ECOOP 2006 -- Object-Oriented Programming",
    year="2006",
    publisher="Springer Berlin Heidelberg",
    address="Berlin, Heidelberg",
    pages="380--403",
    abstract="A test case consists of two parts: a test input to exercise the program under test and a test oracle to check the correctness of the test execution. A test oracle is often in the form of executable assertions such as in the JUnit testing framework. Manually generated test cases are valuable in exposing program faults in the current program version or regression faults in future program versions. However, manually generated test cases are often insufficient for assuring high software quality. We can then use an existing test-generation tool to generate new test inputs to augment the existing test suite. However, without specifications these automatically generated test inputs often do not have test oracles for exposing faults. In this paper, we have developed an automatic approach and its supporting tool, called Orstra, for augmenting an automatically generated unit-test suite with regression oracle checking. The augmented test suite has an improved capability of guarding against regression faults. In our new approach, Orstra first executes the test suite and collects the class under test's object states exercised by the test suite. On collected object states, Orstra creates assertions for asserting behavior of the object states. On executed observer methods (public methods with non-void returns), Orstra also creates assertions for asserting their return values. Then later when the class is changed, the augmented test suite is executed to check whether assertion violations are reported. We have evaluated Orstra on augmenting automatically generated tests for eleven subjects taken from a variety of sources. The experimental results show that an automatically generated test suite's fault-detection capability can be effectively improved after being augmented by Orstra.",
    isbn="978-3-540-35727-8"
}

@INPROCEEDINGS{IndustrialEvalAlmasi2017, 
author={M. M. Almasi and H. Hemmati and G. Fraser and A. Arcuri and J. Benefelds}, 
booktitle={2017 IEEE/ACM 39th International Conference on Software Engineering: Software Engineering in Practice Track (ICSE-SEIP)}, 
title={An Industrial Evaluation of Unit Test Generation: Finding Real Faults in a Financial Application}, 
year={2017}, 
volume={}, 
number={}, 
pages={263-272}, 
keywords={Java;fault diagnosis;insurance data processing;pensions;program testing;software reliability;software tools;EVOSUITE;Java;RANDOOP;automated unit test generation;complex state object configuration;fault classification;fault detection;fault-finding effectiveness;feedback-directed random test generation;financial application;industrial evaluation;life insurance;open source systems;pension products calculator engine;search-based test generation;software project;technology transfer;test generation tools;Java;Pensions;Prototypes;Software;Software engineering;Testing;Tools;Automated Tests Generation;Empirical Software Engineering;Random Testing;Search-based Testing}, 
doi={10.1109/ICSE-SEIP.2017.27}, 
ISSN={}, 
month={May},}

@inproceedings{Just:2014:MVS:2635868.2635929,
 author = {Just, Ren{\'e} and Jalali, Darioush and Inozemtseva, Laura and Ernst, Michael D. and Holmes, Reid and Fraser, Gordon},
 title = {Are Mutants a Valid Substitute for Real Faults in Software Testing?},
 booktitle = {Proceedings of the 22Nd ACM SIGSOFT International Symposium on Foundations of Software Engineering},
 series = {FSE 2014},
 year = {2014},
 isbn = {978-1-4503-3056-5},
 location = {Hong Kong, China},
 pages = {654--665},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/2635868.2635929},
 doi = {10.1145/2635868.2635929},
 acmid = {2635929},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Test effectiveness, code coverage, mutation analysis, real faults},ForestGreen
} 

@inproceedings{pull:request:evaluation,
 author = {Allamanis, Miltiadis and Barr, Earl T. and Bird, Christian and Sutton, Charles},
 title = {Learning Natural Coding Conventions},
 booktitle = {Proceedings of the 22Nd ACM SIGSOFT International Symposium on Foundations of Software Engineering},
 series = {FSE 2014},
 year = {2014},
 isbn = {978-1-4503-3056-5},
 location = {Hong Kong, China},
 pages = {281--293},
 numpages = {13},
 url = {http://doi.acm.org/10.1145/2635868.2635883},
 doi = {10.1145/2635868.2635883},
 acmid = {2635883},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Coding conventions, naturalness of software},
} 




































@inproceedings{JBSE,
	author = {Braione, Pietro and Denaro, Giovanni and Pezz\`{e}, Mauro},
	title = {JBSE: A Symbolic Executor for Java Programs with Complex Heap Inputs},
	booktitle = {Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering},
	series = {FSE 2016},
	year = {2016},
	isbn = {978-1-4503-4218-6},
	location = {Seattle, WA, USA},
	pages = {1018--1022},
	numpages = {5},
	url = {http://doi.acm.org/10.1145/2950290.2983940},
	doi = {10.1145/2950290.2983940},
	acmid = {2983940},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Alloy, Heap Exploration Logic, Heap data structures, Pointer Assertion Logic, RepOk, Symbolic Execution},
}

@inproceedings{Taneja:2008:DAR:1642931.1642986,
	author = {Taneja, K. and Tao Xie},
	title = {DiffGen: Automated Regression Unit-Test Generation},
	booktitle = {Proceedings of the 2008 23rd IEEE/ACM International Conference on Automated Software Engineering},
	series = {ASE '08},
	year = {2008},
	isbn = {978-1-4244-2187-9},
	pages = {407--410},
	numpages = {4},
	url = {http://dx.doi.org/10.1109/ASE.2008.60},
	doi = {10.1109/ASE.2008.60},
	acmid = {1642986},
	publisher = {IEEE Computer Society},
	address = {Washington, DC, USA},
	keywords = {coverage-based test generation tool, software program maintenance, DiffGen automated regression unit-test generation, software development, Java program checking},
} 

@inproceedings{godefroid2005dart,
	title={DART: directed automated random testing},
	author={Godefroid, Patrice and Klarlund, Nils and Sen, Koushik},
	booktitle={ACM Sigplan Notices},
	volume={40},
	number={6},
	pages={213--223},
	year={2005},
	organization={ACM}
}

@inproceedings{fraser2012seed,
	title={The seed is strong: Seeding strategies in search-based software testing},
	author={Fraser, Gordon and Arcuri, Andrea},
	booktitle={Software Testing, Verification and Validation (ICST), 2012 IEEE Fifth International Conference on},
	pages={121--130},
	year={2012},
	organization={IEEE}
}

@inproceedings{groce2007randomized,
	title={Randomized differential testing as a prelude to formal verification},
	author={Groce, Alex and Holzmann, Gerard and Joshi, Rajeev},
	booktitle={Proceedings of the 29th international conference on Software Engineering},
	pages={621--631},
	year={2007},
	organization={IEEE Computer Society}
}

@article{Yoo:2012:TDR:2237756.2237758,
	author = {Yoo, S. and Harman, M.},
	title = {Test Data Regeneration: Generating New Test Data from Existing Test Data},
	journal = {Softw. Test. Verif. Reliab.},
	issue_date = {May 2012},
	volume = {22},
	number = {3},
	month = may,
	year = {2012},
	issn = {0960-0833},
	pages = {171--201},
	numpages = {31},
	url = {http://dx.doi.org/10.1002/stvr.435},
	doi = {10.1002/stvr.435},
	acmid = {2237758},
	publisher = {John Wiley and Sons Ltd.},
	address = {Chichester, UK},
	keywords = {search-based software testing, test data generation},
} 

@INPROCEEDINGS{test-suite-augmentation, 
	author={R. {Santelices} and P. K. {Chittimalli} and T. {Apiwattanapong} and A. {Orso} and M. J. {Harrold}}, 
	booktitle={2008 23rd IEEE/ACM International Conference on Automated Software Engineering}, 
	title={Test-Suite Augmentation for Evolving Software}, 
	year={2008}, 
	volume={}, 
	number={}, 
	pages={218-227}, 
	keywords={program testing;software fault tolerance;test-suite augmentation;regression testing;evolving software;MATRIX;dependence analysis;partial symbolic execution;fault-detection capabilities;Distance measurement;Software;Testing;Fault diagnosis;Explosions;Gain;Patents}, 
	doi={10.1109/ASE.2008.32}, 
	ISSN={1938-4300}, 
	month={Sep.},}

@INPROCEEDINGS{automated-behavioral-regression-testing, 
	author={W. {Jin} and A. {Orso} and T. {Xie}}, 
	booktitle={2010 Third International Conference on Software Testing, Verification and Validation}, 
	title={Automated Behavioral Regression Testing}, 
	year={2010}, 
	volume={}, 
	number={}, 
	pages={137-146}, 
	keywords={automatic test software;program testing;regression analysis;software fault tolerance;software maintenance;software quality;automated behavioral regression testing technique;regression faults;program functionality;program testing;dynamical analysis;BERT;Eclipse;integrated development environment;software maintenance;Automatic testing;Bit error rate;Vehicle crash testing;Software testing;Fault diagnosis;Costs;Performance evaluation;Software maintenance;Inspection;Writing;Regression testing;software evolution;dynamic analysis}, 
	doi={10.1109/ICST.2010.64}, 
	ISSN={2159-4848}, 
	month={April},}

@inproceedings{Orso:2008:BBR:1401827.1401835,
	author = {Orso, Alessandro and Xie, Tao},
	title = {BERT: BEhavioral Regression Testing},
	booktitle = {Proceedings of the 2008 International Workshop on Dynamic Analysis: Held in Conjunction with the ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA 2008)},
	series = {WODA '08},
	year = {2008},
	isbn = {978-1-60558-054-8},
	location = {Seattle, Washington},
	pages = {36--42},
	numpages = {7},
	url = {http://doi.acm.org/10.1145/1401827.1401835},
	doi = {10.1145/1401827.1401835},
	acmid = {1401835},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {dynamic analysis, regression testing, software evolution},
} 

@inproceedings{evans2007differential,
	title={Differential testing: a new approach to change detection},
	author={Evans, Robert B and Savoia, Alberto},
	booktitle={The 6th Joint Meeting on European software engineering conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering: Companion Papers},
	pages={549--552},
	year={2007},
	organization={ACM}
}

@inproceedings{saff2004experimental,
	title={An experimental evaluation of continuous testing during development},
	author={Saff, David and Ernst, Michael D},
	booktitle={ACM SIGSOFT Software Engineering Notes},
	volume={29},
	number={4},
	pages={76--85},
	year={2004},
	organization={ACM}
}


@inproceedings{gousios2014exploratory,
	title={An exploratory study of the pull-based software development model},
	author={Gousios, Georgios and Pinzger, Martin and Deursen, Arie van},
	booktitle={Proceedings of the 36th International Conference on Software Engineering},
	pages={345--355},
	year={2014},
	organization={ACM}
}


@inproceedings{CATG,
	author = {Tanno, Haruto and Zhang, Xiaojing and Hoshino, Takashi and Sen, Koushik},
	title = {TesMa and CATG: Automated Test Generation Tools for Models of Enterprise Applications},
	booktitle = {Proceedings of the 37th International Conference on Software Engineering - Volume 2},
	series = {ICSE '15},
	year = {2015},
	location = {Florence, Italy},
	pages = {717--720},
	numpages = {4},
	url = {http://dl.acm.org/citation.cfm?id=2819009.2819147},
	acmid = {2819147},
	publisher = {IEEE Press},
	address = {Piscataway, NJ, USA},
} 

@inproceedings{bohme2014corebench,
	title={Corebench: Studying complexity of regression errors},
	author={B{\"o}hme, Marcel and Roychoudhury, Abhik},
	booktitle={Proceedings of the 2014 International Symposium on Software Testing and Analysis},
	pages={105--115},
	year={2014},
	organization={ACM}
}

@inproceedings{palikareva2016shadow,
	title={Shadow of a doubt: testing for divergences between software versions},
	author={Palikareva, Hristina and Kuchta, Tomasz and Cadar, Cristian},
	booktitle={Proceedings of the 38th International Conference on Software Engineering},
	pages={1181--1192},
	year={2016},
	organization={ACM}
}

@inproceedings{marinescu2013katch,
	title = {{KATCH}: high-coverage testing of software patches},
	isbn = {978-1-4503-2237-9},
	shorttitle = {{KATCH}},
	url = {http://dl.acm.org/citation.cfm?doid=2491411.2491438},
	doi = {10.1145/2491411.2491438},
	language = {en},
	urldate = {2017-04-28},
	publisher = {ACM Press},
	author = {Marinescu, Paul Dan and Cadar, Cristian},
	year = {2013},
	pages = {235}
}

@InProceedings{TaoXie2006,
	author="Xie, Tao",
	editor="Thomas, Dave",
	title="Augmenting Automatically Generated Unit-Test Suites with Regression Oracle Checking",
	booktitle="ECOOP 2006 -- Object-Oriented Programming",
	year="2006",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="380--403",
	abstract="A test case consists of two parts: a test input to exercise the program under test and a test oracle to check the correctness of the test execution. A test oracle is often in the form of executable assertions such as in the JUnit testing framework. Manually generated test cases are valuable in exposing program faults in the current program version or regression faults in future program versions. However, manually generated test cases are often insufficient for assuring high software quality. We can then use an existing test-generation tool to generate new test inputs to augment the existing test suite. However, without specifications these automatically generated test inputs often do not have test oracles for exposing faults. In this paper, we have developed an automatic approach and its supporting tool, called Orstra, for augmenting an automatically generated unit-test suite with regression oracle checking. The augmented test suite has an improved capability of guarding against regression faults. In our new approach, Orstra first executes the test suite and collects the class under test's object states exercised by the test suite. On collected object states, Orstra creates assertions for asserting behavior of the object states. On executed observer methods (public methods with non-void returns), Orstra also creates assertions for asserting their return values. Then later when the class is changed, the augmented test suite is executed to check whether assertion violations are reported. We have evaluated Orstra on augmenting automatically generated tests for eleven subjects taken from a variety of sources. The experimental results show that an automatically generated test suite's fault-detection capability can be effectively improved after being augmented by Orstra.",
	isbn="978-3-540-35727-8"
}


@inproceedings{rosen2015commit,
	title={Commit guru: analytics and risk prediction of software commits},
	author={Rosen, Christoffer and Grawi, Ben and Shihab, Emad},
	booktitle={Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering},
	pages={966--969},
	year={2015},
	organization={ACM}
}


@ARTICLE{TillmannSymbc, 
	author={N. Tillmann and W. Schulte}, 
	journal={IEEE Software}, 
	title={Unit tests reloaded: parameterized unit testing with symbolic execution}, 
	year={2006}, 
	volume={23}, 
	number={4}, 
	pages={38-47}, 
	keywords={object-oriented programming;program diagnostics;program testing;PUT symbolic execution;constraint solving;parameterized unit testing;unit test automation;Automatic testing;Containers;Indexing;Protection;Software testing;Visual databases;Writing;formal methods;symbolic execution;test coverage of code;test design;testing tools;validation}, 
	doi={10.1109/MS.2006.117}, 
	ISSN={0740-7459}, 
	month={July},
}

@article{DSpotarXiv,
	author    = {Benoit Baudry and
	Simon Allier and
	Marcelino Rodriguez{-}Cancio and
	Martin Monperrus},
	title     = {DSpot: Test Amplification for Automatic Assessment of Computational
	Diversity},
	journal   = {CoRR},
	volume    = {abs/1503.05807},
	year      = {2015},
	url       = {http://arxiv.org/abs/1503.05807},
	archivePrefix = {arXiv},
	eprint    = {1503.05807},
	timestamp = {Wed, 07 Jun 2017 14:41:05 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/BaudryARM15},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{jpfshadow,
	author = {Noller, Yannic and Nguyen, Hoang Lam and Tang, Minxing and Kehrer, Timo},
	title = {Shadow Symbolic Execution with Java PathFinder},
	journal = {SIGSOFT Softw. Eng. Notes},
	issue_date = {October 2017},
	volume = {42},
	number = {4},
	month = jan,
	year = {2018},
	issn = {0163-5948},
	pages = {1--5},
	numpages = {5},
	url = {http://doi.acm.org/10.1145/3149485.3149492},
	doi = {10.1145/3149485.3149492},
	acmid = {3149492},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Java PathFinder, Regression Testcase Generation, Software Engineering, Symbolic Execution, Symbolic PathFinder},
}

@Article{dspot-emse,
	author="Danglot, Benjamin
	and Vera-P{\'e}rez, Oscar Luis
	and Baudry, Benoit
	and Monperrus, Martin",
	title="Automatic test improvement with DSpot: a study with ten mature open-source projects",
	journal="Empirical Software Engineering",
	year="2019",
	month="Apr",
	day="24",
	abstract="In the literature, there is a rather clear segregation between manually written tests by developers and automatically generated ones. In this paper, we explore a third solution: to automatically improve existing test cases written by developers. We present the concept, design and implementation of a system called DSpot, that takes developer-written test cases as input (JUnit tests in Java) and synthesizes improved versions of them as output. Those test improvements are given back to developers as patches or pull requests, that can be directly integrated in the main branch of the test code base. We have evaluated DSpot in a deep, systematic manner over 40 real-world unit test classes from 10 notable and open-source software projects. We have amplified all test methods from those 40 unit test classes. In 26/40 cases, DSpot is able to automatically improve the test under study, by triggering new behaviors and adding new valuable assertions. Next, for ten projects under consideration, we have proposed a test improvement automatically synthesized by DSpot to the lead developers. In total, 13/19 proposed test improvements were accepted by the developers and merged into the main code base. This shows that DSpot is capable of automatically improving unit-tests in real-world, large scale Java software.",
	issn="1573-7616",
	doi="10.1007/s10664-019-09692-y",
	url="https://doi.org/10.1007/s10664-019-09692-y"
}


@inproceedings{zhang2012,
	title={Amplifying tests to validate exception handling code},
	author={Zhang, Pingyu and Elbaum, Sebastian},
	booktitle={Proc. of Int. Conf. on Software Engineering (ICSE)},
	pages={595--605},
	year={2012},
	organization={IEEE Press}
}


@inproceedings{dse,
	author = {Person, Suzette and Dwyer, Matthew B. and Elbaum, Sebastian and P\v{a}s\v{a}reanu, Corina S.},
	title = {Differential Symbolic Execution},
	booktitle = {Proceedings of the 16th ACM SIGSOFT International Symposium on Foundations of Software Engineering},
	series = {SIGSOFT '08/FSE-16},
	year = {2008},
	isbn = {978-1-59593-995-1},
	location = {Atlanta, Georgia},
	pages = {226--237},
	numpages = {12},
	url = {http://doi.acm.org/10.1145/1453101.1453131},
	doi = {10.1145/1453101.1453131},
	acmid = {1453131},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {program differencing, software evolution, symbolic execution},
} 

@article{voas1995software,
	title={Software testability: The new verification},
	author={Voas, Jeffrey M. and Miller, Keith W},
	journal={IEEE software},
	volume={12},
	number={3},
	pages={17--28},
	year={1995},
	publisher={IEEE}
}



@inproceedings{tonella,
	author = {Tonella, Paolo},
	title = {Evolutionary Testing of Classes},
	booktitle = {Proceedings of the 2004 ACM SIGSOFT International Symposium on Software Testing and Analysis},
	series = {ISSTA '04},
	year = {2004},
	isbn = {1-58113-820-2},
	location = {Boston, Massachusetts, USA},
	pages = {119--128},
	numpages = {10},
	url = {http://doi.acm.org/10.1145/1007512.1007528},
	doi = {10.1145/1007512.1007528},
	acmid = {1007528},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {automated test case generation, genetic algorithms, object-oriented testing},
} 


@inproceedings{Hilton:2016:UsageCI,
	author = {Hilton, Michael and Tunnell, Timothy and Huang, Kai and Marinov, Darko and Dig, Danny},
	title = {Usage, Costs, and Benefits of Continuous Integration in Open-source Projects},
	booktitle = {Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering},
	series = {ASE 2016},
	year = {2016},
	isbn = {978-1-4503-3845-5},
	location = {Singapore, Singapore},
	pages = {426--437},
	numpages = {12},
	url = {http://doi.acm.org/10.1145/2970276.2970358},
	doi = {10.1145/2970276.2970358},
	acmid = {2970358},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {continuous integration, mining software repositories},
} 

@INPROCEEDINGS{static:analysis:in:ci, 
	author={F. Zampetti and S. Scalabrino and R. Oliveto and G. Canfora and M. Di Penta}, 
	booktitle={2017 IEEE/ACM 14th International Conference on Mining Software Repositories (MSR)}, 
	title={How Open Source Projects Use Static Code Analysis Tools in Continuous Integration Pipelines}, 
	year={2017}, 
	volume={}, 
	number={}, 
	pages={334-344}, 
	keywords={Java;program diagnostics;public domain software;software development management;CI;GitHub;Java open source projects;Travis CI;build failures;code smells;coding standards;continuous integration infrastructure;continuous integration pipelines;open source projects;potential faults;software developers;source code adherence;static code analysis tools;Data mining;Encoding;History;Java;Pipelines;Software;Tools;Continuous Integration;Empirical Study;Open Source Projects;Static Analysis Tools}, 
	doi={10.1109/MSR.2017.2}, 
	ISSN={}, 
	month={May},}

@inproceedings{falleri:hal-01054552,
	title = {{Fine-grained and Accurate Source Code Differencing}},
	author = {Falleri, Jean-R{\'e}my and Morandat, Flor{\'e}al and Blanc, Xavier and Martinez, Matias and Monperrus, Martin},
	url = {https://hal.archives-ouvertes.fr/hal-01054552/file/main.pdf},
	booktitle = {{Proceedings of the International Conference on Automated Software Engineering}},
	pages = {313-324},
	year = {2014},
	doi = {10.1145/2642937.2642982},
}

@inproceedings{Spieker:RL:selection,
	author = {Spieker, Helge and Gotlieb, Arnaud and Marijan, Dusica and Mossige, Morten},
	title = {Reinforcement Learning for Automatic Test Case Prioritization and Selection in Continuous Integration},
	booktitle = {Proceedings of the 26th ACM SIGSOFT International Symposium on Software Testing and Analysis},
	series = {ISSTA 2017},
	year = {2017},
	isbn = {978-1-4503-5076-1},
	location = {Santa Barbara, CA, USA},
	pages = {12--22},
	numpages = {11},
	url = {http://doi.acm.org/10.1145/3092703.3092709},
	doi = {10.1145/3092703.3092709},
	acmid = {3092709},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Continuous Integration, Machine Learning, Regression testing, Reinforcement Learning, Test case prioritization, Test case selection},
} 

@article{Waller:2015:IPB:2735399.2735416,
	author = {Waller, Jan and Ehmke, Nils C. and Hasselbring, Wilhelm},
	title = {Including Performance Benchmarks into Continuous Integration to Enable DevOps},
	journal = {SIGSOFT Softw. Eng. Notes},
	issue_date = {March 2015},
	volume = {40},
	number = {2},
	month = apr,
	year = {2015},
	issn = {0163-5948},
	pages = {1--4},
	numpages = {4},
	url = {http://doi.acm.org/10.1145/2735399.2735416},
	doi = {10.1145/2735399.2735416},
	acmid = {2735416},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Jenkins, Kieker, MooBench},
} 

@inproceedings{vanHoorn:2012:KFA:2188286.2188326,
	author = {van Hoorn, Andr{\'e} and Waller, Jan and Hasselbring, Wilhelm},
	title = {Kieker: A Framework for Application Performance Monitoring and Dynamic Software Analysis},
	booktitle = {Proceedings of the 3rd ACM/SPEC International Conference on Performance Engineering},
	series = {ICPE '12},
	year = {2012},
	isbn = {978-1-4503-1202-8},
	location = {Boston, Massachusetts, USA},
	pages = {247--248},
	numpages = {2},
	url = {http://doi.acm.org/10.1145/2188286.2188326},
	doi = {10.1145/2188286.2188326},
	acmid = {2188326},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {application performance monitoring, dynamic software analysis, kieker framework},
} 

@unknown{jpfsymb,
	author = {Anand, Saswat and S. Pasareanu, Corina and Visser, Willem},
	year = {2007},
	month = {03},
	pages = {134-138},
	title = {JPF-SE: A symbolic execution extension to Java pathfinder},
	volume = {4424}
}

@inproceedings{klee,
	author = {Cadar, Cristian and Dunbar, Daniel and Engler, Dawson},
	title = {KLEE: Unassisted and Automatic Generation of High-coverage Tests for Complex Systems Programs},
	booktitle = {Proceedings of the 8th USENIX Conference on Operating Systems Design and Implementation},
	series = {OSDI'08},
	year = {2008},
	location = {San Diego, California},
	pages = {209--224},
	numpages = {16},
	url = {http://dl.acm.org/citation.cfm?id=1855741.1855756},
	acmid = {1855756},
	publisher = {USENIX Association},
	address = {Berkeley, CA, USA},
} 

@inproceedings{Campos:2014:CTG:2642937.2643002,
	author = {Campos, Jos{\'e} and Arcuri, Andrea and Fraser, Gordon and Abreu, Rui},
	title = {Continuous Test Generation: Enhancing Continuous Integration with Automated Test Generation},
	booktitle = {Proceedings of the 29th ACM/IEEE International Conference on Automated Software Engineering},
	series = {ASE '14},
	year = {2014},
	isbn = {978-1-4503-3013-8},
	location = {Vasteras, Sweden},
	pages = {55--66},
	numpages = {12},
	url = {http://doi.acm.org/10.1145/2642937.2643002},
	doi = {10.1145/2642937.2643002},
	acmid = {2643002},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {automated test generation, continuous integration, continuous testing, unit testing},
} 

@inproceedings{Arie,
	author = {Gousios, Georgios and Pinzger, Martin and Deursen, Arie van},
	title = {An Exploratory Study of the Pull-based Software Development Model},
	booktitle = {Proceedings of the 36th International Conference on Software Engineering},
	series = {ICSE 2014},
	year = {2014},
	isbn = {978-1-4503-2756-5},
	location = {Hyderabad, India},
	pages = {345--355},
	numpages = {11},
	url = {http://doi.acm.org/10.1145/2568225.2568260},
	doi = {10.1145/2568225.2568260},
	acmid = {2568260},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Pull-based development, distributed software development, empirical software engineering, pull request},
} 

@book{duvall2007continuous,
	title={Continuous integration: improving software quality and reducing risk},
	author={Duvall, Paul M and Matyas, Steve and Glover, Andrew},
	year={2007},
	publisher={Pearson Education}
}

@article{fowler2006continuous,
	title={Continuous integration},
	author={Fowler, Martin and Foemmel, Matthew},
	journal={Thought-Works https://www.thoughtworks.com/continuous-integration},
	volume={122},
	pages={14},
	year={2006}
}

@Misc{pr:based:dvlpp,
	howpublished = {\url{https://www.madetech.com/blog/deployment-by-pull-requests}},
	note = {Accessed June 17, 2018},
	title = {The benefits of a pull request workflow},
	author = {Alex Minette}
}

@inproceedings{repairnator,
	TITLE = {{How to Design a Program Repair Bot? Insights from the Repairnator Project}},
	AUTHOR = {Urli, Simon and Yu, Zhongxing and Seinturier, Lionel and Monperrus, Martin},
	BOOKTITLE = {{ICSE 2018 - 40th International Conference on Software Engineering, Track Software Engineering in Practice (SEIP)}},
	PAGES = {1-10},
	YEAR = {2018},
	DOI = {10.1145/nnnnnnn.nnnnnnn},
}

@article{survey:amplification,
	author    = {Benjamin Danglot and
	Oscar Vera{-}Perez and
	Zhongxing Yu and
	Martin Monperrus and
	Benoit Baudry},
	title     = {The Emerging Field of Test Amplification: {A} Survey},
	journal   = {CoRR},
	volume    = {abs/1705.10692},
	year      = {2017},
	url       = {http://arxiv.org/abs/1705.10692},
	archivePrefix = {arXiv},
	eprint    = {1705.10692},
	timestamp = {Wed, 07 Jun 2017 14:40:49 +0200},
	biburl    = {https://dblp.org/rec/bib/journals/corr/DanglotVYMB17},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@Article{descartes,
	author="Vera-P{\'e}rez, Oscar Luis
	and Danglot, Benjamin
	and Monperrus, Martin
	and Baudry, Benoit",
	title="A comprehensive study of pseudo-tested methods",
	journal="Empirical Software Engineering",
	year="2018",
	month="Sep",
	day="19",
	abstract="Pseudo-tested methods are defined as follows: they are covered by the test suite, yet no test case fails when the method body is removed, i.e., when all the effects of this method are suppressed. This intriguing concept was coined in 2016, by Niedermayr and colleagues, who showed that such methods are systematically present, even in well-tested projects with high statement coverage. This work presents a novel analysis of pseudo-tested methods. First, we run a replication of Niedermayr's study with 28K+ methods, enhancing its external validity thanks to the use of new tools and new study subjects. Second, we perform a systematic characterization of these methods, both quantitatively and qualitatively with an extensive manual analysis of 101 pseudo-tested methods. The first part of the study confirms Niedermayr's results: pseudo-tested methods exist in all our subjects. Our in-depth characterization of pseudo-tested methods leads to two key insights: pseudo-tested methods are significantly less tested than the other methods; yet, for most of them, the developers would not pay the testing price to fix this situation. This calls for future work on targeted test generation to specify those pseudo-tested methods without spending developer time.",
	issn="1573-7616",
	doi="10.1007/s10664-018-9653-2",
	url="https://doi.org/10.1007/s10664-018-9653-2"
}

@inproceedings{Test:Coverage:Evolution,
	author = {Hilton, Michael and Bell, Jonathan and Marinov, Darko},
	title = {A Large-scale Study of Test Coverage Evolution},
	booktitle = {Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering},
	series = {ASE 2018},
	year = {2018},
	isbn = {978-1-4503-5937-5},
	location = {Montpellier, France},
	pages = {53--63},
	numpages = {11},
	url = {http://doi.acm.org/10.1145/3238147.3238183},
	doi = {10.1145/3238147.3238183},
	acmid = {3238183},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Software testing, code coverage, empirical study, flaky tests},
} 

@article{Kuchta:2018:SSE:3276753.3208952,
	author = {Kuchta, Tomasz and Palikareva, Hristina and Cadar, Cristian},
	title = {Shadow Symbolic Execution for Testing Software Patches},
	journal = {ACM Trans. Softw. Eng. Methodol.},
	issue_date = {September 2018},
	volume = {27},
	number = {3},
	month = sep,
	year = {2018},
	issn = {1049-331X},
	pages = {10:1--10:32},
	articleno = {10},
	numpages = {32},
	url = {http://doi.acm.org/10.1145/3208952},
	doi = {10.1145/3208952},
	acmid = {3208952},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Symbolic patch testing, cross-version checks, regression bugs},
} 

@inproceedings{Noller:2018:DPA:3238147.3241537,
	author = {Noller, Yannic},
	title = {Differential Program Analysis with Fuzzing and Symbolic Execution},
	booktitle = {Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering},
	series = {ASE 2018},
	year = {2018},
	isbn = {978-1-4503-5937-5},
	location = {Montpellier, France},
	pages = {944--947},
	numpages = {4},
	url = {http://doi.acm.org/10.1145/3238147.3241537},
	doi = {10.1145/3238147.3241537},
	acmid = {3241537},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Differential Program Analysis, Fuzzing, Symbolic Execution},
} 

@INPROCEEDINGS{semantics:code:review, 
	author={M. Menarini and Y. Yan and W. G. Griswold}, 
	booktitle={2017 32nd IEEE/ACM International Conference on Automated Software Engineering (ASE)}, 
	title={Semantics-assisted code review: An efficient tool chain and a user study}, 
	year={2017}, 
	volume={}, 
	number={}, 
	pages={554-565}, 
	keywords={data mining;Internet;project management;software maintenance;semantic-assisted code review;invariant-mining tool chain;code differences;inter-version semantic differential analysis;code repositories;code changes;Tools;Testing;Computer bugs;Semantics;Software;Navigation;Software behavior;mining software repository;code review;likely invariants;dynamic impact analysis;scalability;software testing}, 
	doi={10.1109/ASE.2017.8115666}, 
	ISSN={}, 
	month={Oct},}

@inproceedings{USE:Liang:2018:UUS:3183440.3195020,
	author = {Liang, Hongliang and Hu, Wenying and Zhang, Yini and Jiang, Lin and Shen, Wuwei},
	title = {USE: Unified and Split Execution for Exposing Divergences Between Versions},
	booktitle = {Proceedings of the 40th International Conference on Software Engineering: Companion Proceeedings},
	series = {ICSE '18},
	year = {2018},
	isbn = {978-1-4503-5663-3},
	location = {Gothenburg, Sweden},
	pages = {386--387},
	numpages = {2},
	url = {http://doi.acm.org/10.1145/3183440.3195020},
	doi = {10.1145/3183440.3195020},
	acmid = {3195020},
	publisher = {ACM},
	address = {New York, NY, USA},
} 

@inproceedings{Yang:2014:PDI:2568225.2568319,
	author = {Yang, Guowei and Khurshid, Sarfraz and Person, Suzette and Rungta, Neha},
	title = {Property Differencing for Incremental Checking},
	booktitle = {Proceedings of the 36th International Conference on Software Engineering},
	series = {ICSE 2014},
	year = {2014},
	isbn = {978-1-4503-2756-5},
	location = {Hyderabad, India},
	pages = {1059--1070},
	numpages = {12},
	url = {http://doi.acm.org/10.1145/2568225.2568319},
	doi = {10.1145/2568225.2568319},
	acmid = {2568319},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Daikon, Incremental symbolic execution, Symbolic PathFinder, assertions, change-impact analysis},
} 

@techreport{differential-assertion-checking,
	author = {Lahiri, Shuvendu and McMillan, Kenneth and Hawblitzel, Chris},
	title = {Differential Assertion Checking},
	booktitle = {},
	year = {2013},
	month = {March},
	abstract = {
	
	Previous versions of a program can be a powerful enabler for program analysis by defining new relative specifications and making the results of current program analysis more relevant. In this paper, we describe the approach of it differential assertion checking (DAC) for comparing versions of a program with respect to a set of assertions. DAC provides a natural way to write relative specifications over two programs. We introduce a novel modular approach to DAC by reducing it to single program checking that can be accomplished by any program verifier. In particular, we leverage automatic invariant generation to synthesize relative specifications for pairs of loops and procedures. We provide a preliminary evaluation of a prototype implementation within the symdiff tool along two directions (a) soundly verifying bug fixes in the presence of loops and (b) providing a knob for suppressing alarms when checking a new version of a program.
	
	
	},
	publisher = {},
	url = {https://www.microsoft.com/en-us/research/publication/differential-assertion-checking/},
	address = {},
	pages = {},
	journal = {},
	volume = {},
	chapter = {},
	isbn = {},
}

@INPROCEEDINGS{ReAssert, 
	author={B. Daniel and V. Jagannath and D. Dig and D. Marinov}, 
	booktitle={2009 IEEE/ACM International Conference on Automated Software Engineering}, 
	title={ReAssert: Suggesting Repairs for Broken Unit Tests}, 
	year={2009}, 
	volume={}, 
	number={}, 
	pages={433-444}, 
	keywords={program testing;software maintenance;ReAssert;broken unit tests;code under test;test code;test suite;test repair;program transformation;assertion method;Automatic testing;Software testing;Application software;Logic testing;Performance evaluation;Software engineering;USA Councils;Programming;Government;Protection;Software testing;Software maintenance;Software tools;Software test maintenance}, 
	doi={10.1109/ASE.2009.17}, 
	ISSN={1938-4300}, 
	month={Nov},
}

@Article{Danglot2019,
	author="Danglot, Benjamin
	and Vera-P{\'e}rez, Oscar Luis
	and Baudry, Benoit
	and Monperrus, Martin",
	title="Automatic test improvement with DSpot: a study with ten mature open-source projects",
	journal="Empirical Software Engineering",
	year="2019",
	month="Apr",
	day="24",
	abstract="In the literature, there is a rather clear segregation between manually written tests by developers and automatically generated ones. In this paper, we explore a third solution: to automatically improve existing test cases written by developers. We present the concept, design and implementation of a system called DSpot, that takes developer-written test cases as input (JUnit tests in Java) and synthesizes improved versions of them as output. Those test improvements are given back to developers as patches or pull requests, that can be directly integrated in the main branch of the test code base. We have evaluated DSpot in a deep, systematic manner over 40 real-world unit test classes from 10 notable and open-source software projects. We have amplified all test methods from those 40 unit test classes. In 26/40 cases, DSpot is able to automatically improve the test under study, by triggering new behaviors and adding new valuable assertions. Next, for ten projects under consideration, we have proposed a test improvement automatically synthesized by DSpot to the lead developers. In total, 13/19 proposed test improvements were accepted by the developers and merged into the main code base. This shows that DSpot is capable of automatically improving unit-tests in real-world, large scale Java software.",
	issn="1573-7616",
	doi="10.1007/s10664-019-09692-y",
	url="https://doi.org/10.1007/s10664-019-09692-y"
}

@inproceedings{PachecoE2005,
	author = {Carlos Pacheco and Michael D. Ernst},
	title = {Eclat: Automatic generation and classification of test inputs},
	booktitle = {ECOOP 2005 --- Object-Oriented Programming, 19th European
	Conference},
	pages = {504--527},
	address = {Glasgow, Scotland},
	month = jul,
	year = {2005}
}

@article{TOSEM_userstudy,
	author = {Gordon Fraser and Matt Staats and Phil McMinn and Andrea Arcuri and Frank Padberg},
	title = {Does Automated Unit Test Generation Really Help Software Testers? A Controlled Empirical Study},
	journal ={ACM Transactions on Software Engineering and Methodology (TOSEM)},
	volume={24},
	number={4},
	pages={23},
	year={2015},
	publisher={ACM}
}
